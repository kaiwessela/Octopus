TODO:
Model:
- Kommentare und Erklärungen für alle Requests und Conditions
- Collections
- Erklärungen und evtl. Absicherungen für StaticObject
- Kollisionstests (Einzigartigkeit) für Relationships
- Flow und Edit Control für StaticObjects

- Neuorganisation von Relationship-Joins (alle/keine/limit usw.)
- RelationshipList direkt pullen

- Neuorganisation von DatabaseAccess-Provision

- mehrere RelationshipLists für eine Entity

- next und prev für Pagination

- custom arrayify or add function calls to json api



- EntityList-Kinder optional machen
- FlowControl abschaffen



BUGS:
-


PLANNED CHANGES:
- remove subline from Post

- new/better auth/permission system

- remove and reorganize Config::SERVER_URL

- update Post content lengths

- the DataObject Array update: allow special PropertyDefinitions for arrays with a fixed structure so that they dont
	have to be validated manually (kind of nested property definitions)

- use transactions on Entity::push()




----------------
Idee: DataObjectCollection
- gespeichert als JSON in einem Container-Objekt
	-> Mischung aus DataObject und DataType
- Format:
	{
		type_1: [object_id_1, object_id_2, …],
		type_2: …,
		…
	}
	oder
	{
		name_1: {'type': type_1, 'ids' => [object_id_1, object_id_2], (options/tags: […])}
		…
	}
- Jeder Typ wird einzeln gepullt; Dafür sind neue Pull-Funktionen zumindest in DataObjectLists nötig,
	die das Pullen einer spezifischen Liste von IDs erlauben.
- Objekte und evtl. auch Listen sollen in Markdown-Text eingebunden werden können, z.B. per [[object]].
	-> erfordert neuen MarkdownContent, der zum Parsen Templates mitgegeben werden müssen.
		Ähnlich wie bei den each-Funktionen. Bei fehlenden Templates wird das Objekt ignoriert.
		(evtl. mit Umschaltung, ob ignoriert oder die ID ausgegeben werden soll)
